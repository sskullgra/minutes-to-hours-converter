{"version":3,"sources":["components/Main/useStyles.js","utils/Converter.js","components/Main/index.js","contexts/StyleThemeProvider/index.js","components/Root/Root.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","backgroundColor","palette","background","default","width","height","position","paper","left","transform","maxWidth","padding","spacing","boxSizing","breakpoints","down","HMContainer","display","alignItems","HMColon","MtoHM","minutes","h","Math","floor","m","MtoHD","toFixed","HMtoM","hours","HMtoHD","HDtoM","decimal","round","Main","classes","useState","setMinutes","hmMinutes","setHMMinutes","hmHours","setHMHours","Hours","setHours","className","Card","CardHeader","title","CardContent","Grid","container","item","xs","sm","TextField","variant","label","fullWidth","onChange","e","v","parseInt","target","value","hm","Typography","length","match","parseFloat","replace","p1","p2","createMuiTheme","StyleThemeProvider","children","ThemeProvider","Root","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.13ce8b39.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/styles\"\n\nconst useStyles = makeStyles(theme => {\n  return {\n    root: {\n      backgroundColor: theme.palette.background.default,\n      width: \"100%\",\n      height: \"100%\",\n      position: \"absolute\"\n    },\n    paper: {\n      position: \"absolute\",\n      left: \"50%\",\n      width: \"100%\",\n      transform: \"translate(-50%,0)\",\n      maxWidth: 700,\n      padding: theme.spacing(2),\n      boxSizing: \"border-box\",\n\n      [theme.breakpoints.down(\"xs\")]: {\n        padding: theme.spacing(1)\n      }\n    },\n    HMContainer: {\n      display: \"flex\",\n      alignItems: \"center\"\n    },\n    HMColon: {\n      padding: theme.spacing(0.25)\n    }\n  }\n})\n\nexport default useStyles\n","export function MtoHM(minutes) {\n  const h = Math.floor(minutes / 60)\n  const m = minutes % 60\n  return { h, m }\n}\n\nexport function MtoHD(minutes) {\n  return (minutes / 60.0).toFixed(4)\n}\n\nexport function HMtoM(hours, minutes) {\n  return 60 * hours + minutes\n}\n\nexport function HMtoHD(hours, minutes) {\n  const m = HMtoM(hours, minutes)\n  return MtoHD(m)\n}\n\nexport function HDtoM(decimal) {\n  return Math.round(decimal * 60)\n}\n\nexport function HDtoHM(decimal) {\n  const minutes = HDtoM(decimal)\n  return MtoHM(minutes)\n}\n","import React, { useState } from \"react\"\nimport useStyles from \"./useStyles\"\nimport {\n  TextField,\n  Grid,\n  Typography,\n  Card,\n  CardHeader,\n  CardContent\n} from \"@material-ui/core\"\nimport {\n  MtoHM,\n  MtoHD,\n  HMtoM,\n  HMtoHD,\n  HDtoM,\n  HDtoHM\n} from \"../../utils/Converter\"\n\nconst Main = () => {\n  const classes = useStyles()\n  const [minutes, setMinutes] = useState(0)\n  const [hmMinutes, setHMMinutes] = useState(0)\n  const [hmHours, setHMHours] = useState(0)\n  const [Hours, setHours] = useState(0)\n\n  const handleChangeMinutes = e => {\n    const v = parseInt(e.target.value) || 0\n    const hm = MtoHM(v)\n    const h = MtoHD(v)\n    setMinutes(v)\n    setHMMinutes(hm.m)\n    setHMHours(hm.h)\n    setHours(h)\n  }\n\n  const handleChangeHMMinutes = e => {\n    const v = parseInt(e.target.value) || 0\n    const m = HMtoM(hmHours, v)\n    const h = HMtoHD(hmHours, v)\n    setMinutes(m)\n    setHMMinutes(v)\n    setHours(h)\n  }\n\n  const handleChangeHMHours = e => {\n    const v = parseInt(e.target.value) || 0\n    const m = HMtoM(v, hmMinutes)\n    const h = HMtoHD(v, hmMinutes)\n    setMinutes(m)\n    setHMHours(v)\n    setHours(h)\n  }\n\n  const handleChangeHoursDecimal = e => {\n    if (\n      e.target.value.length > 0 &&\n      !e.target.value.match(/(^\\d)*\\.?(\\d)*$/)[0]\n    )\n      return\n    const v = (parseFloat(e.target.value) || 0).toFixed(4)\n    const m = HDtoM(v)\n    const hm = HDtoHM(v)\n    setMinutes(m)\n    setHMHours(hm.h)\n    setHMMinutes(hm.m)\n    setHours(\n      e.target.value.replace(/^(0*)(\\d)/, (match, p1, p2) => {\n        return p2\n      }) || 0\n    )\n  }\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.paper}>\n        <Card>\n          <CardHeader title=\"Simple Minutes to Hours Converter\" />\n          <CardContent>\n            <form>\n              <Grid container spacing={1}>\n                <Grid item xs={12} sm={4}>\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Minutes\"\n                    fullWidth\n                    onChange={handleChangeMinutes}\n                    value={minutes}\n                  ></TextField>\n                </Grid>\n                <Grid item xs={12} sm={4} className={classes.HMContainer}>\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Hours\"\n                    fullWidth\n                    onChange={handleChangeHMHours}\n                    value={hmHours}\n                  ></TextField>\n                  <Typography variant=\"h4\">:</Typography>\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Minutes\"\n                    fullWidth\n                    onChange={handleChangeHMMinutes}\n                    value={hmMinutes}\n                  ></TextField>\n                </Grid>\n                <Grid item xs={12} sm={4}>\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Hours Decimal\"\n                    fullWidth\n                    onChange={handleChangeHoursDecimal}\n                    value={Hours}\n                  ></TextField>\n                </Grid>\n              </Grid>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n\nexport default Main\n","import React from \"react\"\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\"\n\nconst theme = createMuiTheme({\n})\n\nexport default function StyleThemeProvider({ children }) {\n  return <ThemeProvider theme={theme}>{children}</ThemeProvider>\n}\n","import React from \"react\"\nimport StyleThemeProvider from \"../../contexts/StyleThemeProvider\"\n\nconst Root = ({ children }) => {\n  return <StyleThemeProvider>{children}</StyleThemeProvider>\n}\n\nexport default Root\n","import React from \"react\"\nimport \"./App.css\"\nimport Main from \"./components/Main\"\nimport Root from \"./components/Root/Root\"\n\nfunction App() {\n  return (\n    <Root>\n      <Main />\n    </Root>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}